name: Deploy WordPress in Container Apps

on:
  workflow_dispatch

jobs:
  build:
    runs-on: windows-2019

    steps:
    - uses: actions/checkout@v2
    
    - name: 'Navigate to Workspace'
      run: cd $GITHUB_WORKSPACE

    - name: 'dir just for debug'
      run: |
        dir

    - name: 'Build Container Apps'
      shell: pwsh
      run: |
        # env
        $subscriptionId="${{ secrets.SUBSCRIPTIONID }}"
        $ResourceGroup="${{ vars.ResourceGroup }}"
        $location="${{ vars.Location }}"
        $Enviorment="worpress-containerapps"

       
        # Login to Azure
        az login --service-principal -u ${{ secrets.APPLICATIONID }} -p ${{ secrets.SECRET }} --tenant ${{ secrets.TENANTID }}
        
        # Set the subscription context
        az account set --subscription $subscriptionId
        
        # Create a new resource group for the gallery if it doesn't exist
        az group create --name $ResourceGroup --location $location
        
        # Prepare env
        az extension add --name containerapp --upgrade --allow-preview true
        #az extension add --name containerapp-compose --upgrade --yes --allow-preview true
        az provider register --namespace Microsoft.App
        az provider register --namespace Microsoft.OperationalInsights

        # Create Container App Enviorment
        az containerapp env create --name $Enviorment --resource-group $ResourceGroup --location $location

        # Create a container app by explicitly passing in a Compose configuration file.
        az containerapp compose create -g $ResourceGroup --environment $Enviorment --compose-file-path "docker-compose-azure.yml"

        # you cannot configure the ingress controller in details for Azure Container Apps directly via a Docker Compose file. Instead, ingress settings must be configured using the Azure CLI.
        az containerapp ingress enable --name "db007" --resource-group $ResourceGroup --target-port 3306 --exposed-port 3306 --transport tcp --type internal

        # Add a persistant storage to DB container - https://learn.microsoft.com/en-us/azure/container-apps/storage-mounts-azure-files?tabs=bash
        
        # First Create Azure Fileshare
        $STORAGE_ACCOUNT_NAME="$ResourceGroup$(Get-Random -Maximum 10000)"
        $STORAGE_ACCOUNT_NAME = $STORAGE_ACCOUNT_NAME.ToLower()
        az storage account create --resource-group $ResourceGroup --name $STORAGE_ACCOUNT_NAME --location "$location" --kind StorageV2 --sku Standard_LRS --enable-large-file-share --query provisioningState
        $STORAGE_SHARE_NAME="myfileshare"
        az storage share-rm create --resource-group $ResourceGroup --storage-account $STORAGE_ACCOUNT_NAME --name $STORAGE_SHARE_NAME --quota 100 --enabled-protocols SMB --output table
        $STORAGE_ACCOUNT_KEY=$(az storage account keys list -n $STORAGE_ACCOUNT_NAME --query "[0].value" -o tsv)
        
        # Mount the storage to the container
        $STORAGE_MOUNT_NAME="db007mount"
        az containerapp env storage set --access-mode ReadWrite --azure-file-account-name $STORAGE_ACCOUNT_NAME --azure-file-account-key $STORAGE_ACCOUNT_KEY --azure-file-share-name $STORAGE_SHARE_NAME --storage-name $STORAGE_MOUNT_NAME --name $Enviorment --resource-group $ResourceGroup --output table
        $CONTAINER_APP_NAME="db007"
        az containerapp show --name $CONTAINER_APP_NAME --resource-group $ResourceGroup --output yaml > app.yaml
        Write-Host "----- app.yaml Orginal -----"
        Get-Content -Path "app.yaml"
        Write-Host "----------------------------"

        # Modify the app.yaml file to include the storage mount
        
        $filePath = "app.yaml"
        
        # Read the contents of the file
        $fileContent = Get-Content -Path $filePath
        
        # Define the new volumes section
        $newVolumesSection = @"
        volumes:
            - name: $STORAGE_MOUNT_NAME
              storageName: $STORAGE_ACCOUNT_NAME
              storageType: AzureFile
        "@
        
        # Replace the "volumes": null line with the new volumes section
        $fileContent = $fileContent -replace 'volumes: null', $newVolumesSection
        
        # Define the new volumes section for container
        $newVolumesSection = @"
        containers:
            volumeMounts:
            - volumeName: $STORAGE_MOUNT_NAME
              mountPath: /var/lib/mysql
        "@

        # Replace the volumes section for container
        $fileContent = $fileContent -replace 'containers:', $newVolumesSection

        # Write the updated content back to the file
        #### Set-Content -Path $filePath -Value $fileContent

        Write-Host "------- app.yaml New -------"
        Get-Content -Path "app.yaml"
        Write-Host "----------------------------"

        # Update the container app with the modified app.yaml file
        az containerapp update --name $CONTAINER_APP_NAME --resource-group $ResourceGroup --yaml app.yaml --output table



